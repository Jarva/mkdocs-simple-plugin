{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mkdocs-simple-plugin | Code | Docs | PyPi | Docker | GitHub Action | This plugin enables you to build documentation from markdown files interspersed within your code using mkdocs . It is designed for the way developers commonly write documentation in their own code -- with simple markdown files. About You may be wondering why you would want to generate a static site for your project, without doing the typical \"wiki\" thing of consolidating all documentation within a single docs folder or using a single README file. My repository is too big for a single documentation source. Sometimes it isn't really feasible to consolidate all documentation within an upper level docs directory. This is often the case with medium/large repositories. In general, if your code base is too large to fit well within a single include directory, your code base is probably also too large for documentation to fit within a single docs directory. Since it's typically easier to keep documentation up to date when it lives as close to the code as possible, it is better to create multiple sources for documentation. My repository is too simple for advanced documentation. If your code base is very very large, something like the monorepo plugin might better fit your needs. For most other medium+ repositories that have grown over time, you probably have scattered documentation throughout your code. By combining all of that documentation while keeping folder structure, you can better surface and collaborate with others. And, let's face it. That documentation is probably all in markdown, since github renders it nicely. I want a pretty documentation site without the hassle. Finally, you may be interested in this plugin if you have a desire for stylized documentation, but don't want to invest the time/energy in replicating information you already have in your README.md files, and you want to keep them where they are (thank you very much). See mkdocs-simple-plugin for usage. Contributing See the contributing guide License This software is licensed under Apache 2.0","title":"About"},{"location":"#mkdocs-simple-plugin","text":"| Code | Docs | PyPi | Docker | GitHub Action | This plugin enables you to build documentation from markdown files interspersed within your code using mkdocs . It is designed for the way developers commonly write documentation in their own code -- with simple markdown files.","title":"mkdocs-simple-plugin"},{"location":"#about","text":"You may be wondering why you would want to generate a static site for your project, without doing the typical \"wiki\" thing of consolidating all documentation within a single docs folder or using a single README file. My repository is too big for a single documentation source. Sometimes it isn't really feasible to consolidate all documentation within an upper level docs directory. This is often the case with medium/large repositories. In general, if your code base is too large to fit well within a single include directory, your code base is probably also too large for documentation to fit within a single docs directory. Since it's typically easier to keep documentation up to date when it lives as close to the code as possible, it is better to create multiple sources for documentation. My repository is too simple for advanced documentation. If your code base is very very large, something like the monorepo plugin might better fit your needs. For most other medium+ repositories that have grown over time, you probably have scattered documentation throughout your code. By combining all of that documentation while keeping folder structure, you can better surface and collaborate with others. And, let's face it. That documentation is probably all in markdown, since github renders it nicely. I want a pretty documentation site without the hassle. Finally, you may be interested in this plugin if you have a desire for stylized documentation, but don't want to invest the time/energy in replicating information you already have in your README.md files, and you want to keep them where they are (thank you very much). See mkdocs-simple-plugin for usage.","title":"About"},{"location":"#contributing","text":"See the contributing guide","title":"Contributing"},{"location":"#license","text":"This software is licensed under Apache 2.0","title":"License"},{"location":"CONTRIBUTING/","text":"Contributing Guide First off, thanks for taking the time to contribute! The Basics If you are looking to help to with a code contribution this project uses mkdocs for documentation generation, python for the plugin, along with a splattering of markdown and shellscript . I've included my vscode workspace and a docker development container. Read about how I develop using vscode and docker . If you don't feel ready to make a code contribution yet, no problem! You can also check out the issues we have in the github issue tracker . How to Contribute Never made an open source contribution before? Wondering how contributions work in the in this project? Here's a quick rundown! Find an issue that you are interested in addressing or a feature that you would like to add in the issue tracker . Don't see your issue? Submit one! Fork the repository associated with the issue to your local GitHub account. This means that you will have a copy of the repository under your-GitHub-username/repository-name. Clone the repository to your local machine. git clone https://github.com/github-username/mkdocs-simple-plugin.git Create a new branch for your fix. git checkout -b branch-name-here Make the appropriate changes for the issue you are trying to address or the feature that you want to add. Add the file contents of the changed files to the \"snapshot\" git uses to manage the state of the project, also known as the index. git add <file_list> Insert a short message of the changes made to store the contents of the index with a descriptive message. git commit -m \"Insert a short message of the changes made here\" Push the changes to the remote repository git push origin branch-name-here. Submit a pull request to the upstream repository. Title the pull request with a short description of the changes made and the issue or bug number associated with your change. For example, you can title an issue like so \"Added more log outputting to resolve #4352\". In the description of the pull request, explain the changes that you made, any issues you think exist with the pull request you made, and any questions you have for the maintainer. It's OK if your pull request is not perfect (no pull request is), the reviewer will be able to help you fix any problems and improve it! Wait for the pull request to be reviewed by a maintainer. Make changes to the pull request if the reviewing maintainer recommends them. Celebrate your success after your pull request is merged! Getting Help If you need help, you can ask questions on the issue tracker","title":"Contributing Guide"},{"location":"CONTRIBUTING/#contributing-guide","text":"First off, thanks for taking the time to contribute!","title":"Contributing Guide"},{"location":"CONTRIBUTING/#the-basics","text":"If you are looking to help to with a code contribution this project uses mkdocs for documentation generation, python for the plugin, along with a splattering of markdown and shellscript . I've included my vscode workspace and a docker development container. Read about how I develop using vscode and docker . If you don't feel ready to make a code contribution yet, no problem! You can also check out the issues we have in the github issue tracker .","title":"The Basics"},{"location":"CONTRIBUTING/#how-to-contribute","text":"Never made an open source contribution before? Wondering how contributions work in the in this project? Here's a quick rundown! Find an issue that you are interested in addressing or a feature that you would like to add in the issue tracker . Don't see your issue? Submit one! Fork the repository associated with the issue to your local GitHub account. This means that you will have a copy of the repository under your-GitHub-username/repository-name. Clone the repository to your local machine. git clone https://github.com/github-username/mkdocs-simple-plugin.git Create a new branch for your fix. git checkout -b branch-name-here Make the appropriate changes for the issue you are trying to address or the feature that you want to add. Add the file contents of the changed files to the \"snapshot\" git uses to manage the state of the project, also known as the index. git add <file_list> Insert a short message of the changes made to store the contents of the index with a descriptive message. git commit -m \"Insert a short message of the changes made here\" Push the changes to the remote repository git push origin branch-name-here. Submit a pull request to the upstream repository. Title the pull request with a short description of the changes made and the issue or bug number associated with your change. For example, you can title an issue like so \"Added more log outputting to resolve #4352\". In the description of the pull request, explain the changes that you made, any issues you think exist with the pull request you made, and any questions you have for the maintainer. It's OK if your pull request is not perfect (no pull request is), the reviewer will be able to help you fix any problems and improve it! Wait for the pull request to be reviewed by a maintainer. Make changes to the pull request if the reviewing maintainer recommends them. Celebrate your success after your pull request is merged!","title":"How to Contribute"},{"location":"CONTRIBUTING/#getting-help","text":"If you need help, you can ask questions on the issue tracker","title":"Getting Help"},{"location":"action/","text":"GitHub Action Enable GitHub pages First, set up your github repository to enable gh-pages support. See Github Pages for more information. Deploy from GitHub Actions Create a yaml file with the following contents in the .github/workflows directory in your repository jobs : docs : runs-on : ubuntu-latest steps : - name : Checkout uses : actions/checkout@v2 - name : Build docs uses : athackst/mkdocs-simple-plugin with : publish_branch : gh-pages # optionally specify branch repo_url : https://github.com/${{ github.repository }} # The URL of the repository the docs should point to site_name : ${{ github.repository }} # The name of the site site_url : https://{{ github.repository_owner }}.github.io/${{ github.event.repository.name }} # The URL of the site","title":"Github Action"},{"location":"action/#github-action","text":"","title":"GitHub Action"},{"location":"action/#enable-github-pages","text":"First, set up your github repository to enable gh-pages support. See Github Pages for more information.","title":"Enable GitHub pages"},{"location":"action/#deploy-from-github-actions","text":"Create a yaml file with the following contents in the .github/workflows directory in your repository jobs : docs : runs-on : ubuntu-latest steps : - name : Checkout uses : actions/checkout@v2 - name : Build docs uses : athackst/mkdocs-simple-plugin with : publish_branch : gh-pages # optionally specify branch repo_url : https://github.com/${{ github.repository }} # The URL of the repository the docs should point to site_name : ${{ github.repository }} # The name of the site site_url : https://{{ github.repository_owner }}.github.io/${{ github.event.repository.name }} # The URL of the site","title":"Deploy from GitHub Actions"},{"location":"docker/","text":"Docker Use this image to create a mkdocs site with the mkdocs-simple-plugin By using the docker image, you don't need to have the plugin or its dependencies installed on your system in order to build, test, and deploy a mkdocs generated site. Run in a docker container Install, build and serve your docs: docker run --rm -it --network = host -v ${ PWD } :/docs --user $( id -u ) : $( id -g ) athackst/mkdocs-simple-plugin Explanation of docker command line options command description -p 8000:8000 [required] Map the mkdocs server port to a port on your localhost. -v ${PWD}:/docs [required] Mount the local directory into the docs directory to build site. --user $(id -u):$(id -g) [recommended] Run the docker container with the current user and group. --rm [optional] remove the docker image after it finishes running. -it [optional] run in an interactive terminal. The docker image by default runs mkdocs serve . Set up an command line alias Add an alias for the docker command to serve docs from any workspace. echo 'function mkdocs_simple() { docker run --rm -it --network=host -v ${PWD}:/docs --user $(id -u):$(id -g) athackst/mkdocs-simple-plugin $@ }' >> ~/.bashrc","title":"Docker"},{"location":"docker/#docker","text":"Use this image to create a mkdocs site with the mkdocs-simple-plugin By using the docker image, you don't need to have the plugin or its dependencies installed on your system in order to build, test, and deploy a mkdocs generated site.","title":"Docker"},{"location":"docker/#run-in-a-docker-container","text":"Install, build and serve your docs: docker run --rm -it --network = host -v ${ PWD } :/docs --user $( id -u ) : $( id -g ) athackst/mkdocs-simple-plugin Explanation of docker command line options command description -p 8000:8000 [required] Map the mkdocs server port to a port on your localhost. -v ${PWD}:/docs [required] Mount the local directory into the docs directory to build site. --user $(id -u):$(id -g) [recommended] Run the docker container with the current user and group. --rm [optional] remove the docker image after it finishes running. -it [optional] run in an interactive terminal. The docker image by default runs mkdocs serve .","title":"Run in a docker container"},{"location":"docker/#set-up-an-command-line-alias","text":"Add an alias for the docker command to serve docs from any workspace. echo 'function mkdocs_simple() { docker run --rm -it --network=host -v ${PWD}:/docs --user $(id -u):$(id -g) athackst/mkdocs-simple-plugin $@ }' >> ~/.bashrc","title":"Set up an command line alias"},{"location":"mkdocs_simple_plugin/","text":"Developing Prerequisites You will need to have mkdocs installed on your system. I recommend installing it via pip to get the latest version. sudo apt-get install python-pip pip install --upgrade pip --user pip install mkdocs --user If you want to run the test suite, you'll also need 'bats' sudo apt-get install bats Local install Install the package locally with pip install -e . Testing Testing involves both linting with flake8 ./tests/test_flake8.sh and testing with bats ./tests/integration/test.bats If you want to test against all the different versions of python, run the local test script. ./tests/test_local.sh VSCode Included in this package is a VSCode workspace and development container. See how I develop with vscode and docker and how I use vscode tasks .","title":"Developing"},{"location":"mkdocs_simple_plugin/#developing","text":"","title":"Developing"},{"location":"mkdocs_simple_plugin/#prerequisites","text":"You will need to have mkdocs installed on your system. I recommend installing it via pip to get the latest version. sudo apt-get install python-pip pip install --upgrade pip --user pip install mkdocs --user If you want to run the test suite, you'll also need 'bats' sudo apt-get install bats","title":"Prerequisites"},{"location":"mkdocs_simple_plugin/#local-install","text":"Install the package locally with pip install -e .","title":"Local install"},{"location":"mkdocs_simple_plugin/#testing","text":"Testing involves both linting with flake8 ./tests/test_flake8.sh and testing with bats ./tests/integration/test.bats If you want to test against all the different versions of python, run the local test script. ./tests/test_local.sh","title":"Testing"},{"location":"mkdocs_simple_plugin/#vscode","text":"Included in this package is a VSCode workspace and development container. See how I develop with vscode and docker and how I use vscode tasks .","title":"VSCode"},{"location":"mkdocs_simple_plugin/generator/","text":"Mkdocs Simple Generator mkdocs_simple_gen is a program that will automatically create a mkdocs.yml configuration file (only if needed) and optionally install dependencies, build, and serve the site. Installation Install the plugin with pip. pip install mkdocs-simple-plugin Python 3.x, 3.5, 3.6, 3.7, 3.8, 3.9 supported. Command line options See --help Usage: mkdocs_simple_gen [OPTIONS] Options: --build / --no-build build the site using mkdocs build --help Show this message and exit. default flags: mkdocs_simple_gen --build Run a local server One of the best parts of mkdocs is it's ability to serve (and update!) your documentation site locally. mkdocs serve","title":"Mkdocs Simple Generator"},{"location":"mkdocs_simple_plugin/generator/#mkdocs-simple-generator","text":"mkdocs_simple_gen is a program that will automatically create a mkdocs.yml configuration file (only if needed) and optionally install dependencies, build, and serve the site.","title":"Mkdocs Simple Generator"},{"location":"mkdocs_simple_plugin/generator/#installation","text":"Install the plugin with pip. pip install mkdocs-simple-plugin Python 3.x, 3.5, 3.6, 3.7, 3.8, 3.9 supported.","title":"Installation"},{"location":"mkdocs_simple_plugin/generator/#command-line-options","text":"See --help Usage: mkdocs_simple_gen [OPTIONS] Options: --build / --no-build build the site using mkdocs build --help Show this message and exit. default flags: mkdocs_simple_gen --build","title":"Command line options"},{"location":"mkdocs_simple_plugin/generator/#run-a-local-server","text":"One of the best parts of mkdocs is it's ability to serve (and update!) your documentation site locally. mkdocs serve","title":"Run a local server"},{"location":"mkdocs_simple_plugin/plugin/","text":"MkDocs Simple Plugin A plugin to the mkdocs package that builds a documentation website from .md files interspersed with in your code Installation Install the plugin with pip. pip install mkdocs-simple-plugin Python 3.x, 3.5, 3.6, 3.7, 3.8, 3.9 supported. Plugin usage Create a mkdocs.yml file in the root of your directory and add this plugin to it's plugin list. site_name : your_site_name plugins : - simple : # Optional setting to only include specific folders include_folders : [ \"*\" ] # Optional setting to ignore specific folders ignore_folders : [ \"\" ] # Optional setting to specify if hidden folders should be ignored ignore_hidden : True # Optional setting to specify other extensions besides md files to be copied include_extensions : [ \".tif\" , \".tiff\" , \".gif\" , \".jpeg\" , \".jpg\" , \".jif\" , \".jfif\" , \".jp2\" , \".jpx\" , \".j2k\" , \".j2c\" , \".fpx\" , \".pcd\" , \".png\" , \".pdf\" ] # Optional setting to specify if docs directory is merge with other documentation merge_docs_dir : True Build Then, you can build the mkdocs from the command line. mkdocs build Run a local server One of the best parts of mkdocs is it's ability to serve (and update!) your documentation site locally. mkdocs serve","title":"Mkdocs Simple Plugin"},{"location":"mkdocs_simple_plugin/plugin/#mkdocs-simple-plugin","text":"A plugin to the mkdocs package that builds a documentation website from .md files interspersed with in your code","title":"MkDocs Simple Plugin"},{"location":"mkdocs_simple_plugin/plugin/#installation","text":"Install the plugin with pip. pip install mkdocs-simple-plugin Python 3.x, 3.5, 3.6, 3.7, 3.8, 3.9 supported.","title":"Installation"},{"location":"mkdocs_simple_plugin/plugin/#plugin-usage","text":"Create a mkdocs.yml file in the root of your directory and add this plugin to it's plugin list. site_name : your_site_name plugins : - simple : # Optional setting to only include specific folders include_folders : [ \"*\" ] # Optional setting to ignore specific folders ignore_folders : [ \"\" ] # Optional setting to specify if hidden folders should be ignored ignore_hidden : True # Optional setting to specify other extensions besides md files to be copied include_extensions : [ \".tif\" , \".tiff\" , \".gif\" , \".jpeg\" , \".jpg\" , \".jif\" , \".jfif\" , \".jp2\" , \".jpx\" , \".j2k\" , \".j2c\" , \".fpx\" , \".pcd\" , \".png\" , \".pdf\" ] # Optional setting to specify if docs directory is merge with other documentation merge_docs_dir : True","title":"Plugin usage"},{"location":"mkdocs_simple_plugin/plugin/#build","text":"Then, you can build the mkdocs from the command line. mkdocs build","title":"Build"},{"location":"mkdocs_simple_plugin/plugin/#run-a-local-server","text":"One of the best parts of mkdocs is it's ability to serve (and update!) your documentation site locally. mkdocs serve","title":"Run a local server"}]}