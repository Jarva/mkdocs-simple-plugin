{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mkdocs-simple-plugin | Code | Docs | PyPi | Docker | GitHub Action | This plugin enables you to build a documentation site from markdown interspersed within your code using mkdocs . It is designed for the way developers commonly write documentation in their code -- with simple markdown files and/or markdown comment blocks in the code. About You may be wondering why you would want to generate a static site for your project, without doing the typical \"wiki\" thing of consolidating all documentation within a single docs folder or using a single README file. My repository is too big for a single documentation source. Sometimes it isn't feasible to consolidate all documentation within an upper level docs directory. This is often the case with medium/large repositories. In general, if your codebase is too large to fit well within a single include directory, your codebase is probably also too large for documentation to fit within a single docs directory. Since it's typically easier to keep documentation up to date when it lives as close to the code as possible, it is better to create multiple sources for documentation. My repository is too simple for advanced documentation. If your codebase is very very large, something like the monorepo plugin might better fit your needs. For most other medium+ repositories that have grown over time, you probably have scattered documentation throughout your code. By combining all of that documentation while keeping folder structure, you can better surface and collaborate with others. And, let's face it. That documentation is probably all in markdown since Github renders it nicely. I want a pretty documentation site without the hassle. Finally, you may be interested in this plugin if you have a desire for stylized documentation, but don't want to invest the time/energy in replicating information you already have in your README.md files or in block comments in your code, and you want to keep them where they are (thank you very much). See mkdocs-simple-plugin for usage. Contributing See the contributing guide License This software is licensed under Apache 2.0","title":"About"},{"location":"#mkdocs-simple-plugin","text":"| Code | Docs | PyPi | Docker | GitHub Action | This plugin enables you to build a documentation site from markdown interspersed within your code using mkdocs . It is designed for the way developers commonly write documentation in their code -- with simple markdown files and/or markdown comment blocks in the code.","title":"mkdocs-simple-plugin"},{"location":"#about","text":"You may be wondering why you would want to generate a static site for your project, without doing the typical \"wiki\" thing of consolidating all documentation within a single docs folder or using a single README file. My repository is too big for a single documentation source. Sometimes it isn't feasible to consolidate all documentation within an upper level docs directory. This is often the case with medium/large repositories. In general, if your codebase is too large to fit well within a single include directory, your codebase is probably also too large for documentation to fit within a single docs directory. Since it's typically easier to keep documentation up to date when it lives as close to the code as possible, it is better to create multiple sources for documentation. My repository is too simple for advanced documentation. If your codebase is very very large, something like the monorepo plugin might better fit your needs. For most other medium+ repositories that have grown over time, you probably have scattered documentation throughout your code. By combining all of that documentation while keeping folder structure, you can better surface and collaborate with others. And, let's face it. That documentation is probably all in markdown since Github renders it nicely. I want a pretty documentation site without the hassle. Finally, you may be interested in this plugin if you have a desire for stylized documentation, but don't want to invest the time/energy in replicating information you already have in your README.md files or in block comments in your code, and you want to keep them where they are (thank you very much). See mkdocs-simple-plugin for usage.","title":"About"},{"location":"#contributing","text":"See the contributing guide","title":"Contributing"},{"location":"#license","text":"This software is licensed under Apache 2.0","title":"License"},{"location":"CONTRIBUTING/","text":"Contributing Guide First off, thanks for taking the time to contribute! The Basics If you are looking to help to with a code contribution this project uses MKDocs for documentation generation, Python for the plugin, along with a splattering of Markdown and ShellScript . I've included my VSCode workspace and a Docker development container. Read about how I develop using VSCode and Docker . If you don't feel ready to make a code contribution yet, no problem! You can also check out the issues we have in the Github issue tracker . How to Contribute Never made an open-source contribution before? Wondering how contributions work in this project? Here's a quick rundown! Find an issue that you are interested in addressing or a feature that you would like to add in the issue tracker . Don't see your issue? Submit one! Fork the repository associated with the issue to your local GitHub account. This means that you will have a copy of the repository under your-GitHub-username/repository-name. Clone the repository to your local machine. git clone https://github.com/github-username/mkdocs-simple-plugin.git Create a new branch for your fix. git checkout -b branch-name-here Make the appropriate changes for the issue you are trying to address or the feature that you want to add. Add the file contents of the changed files to the \"snapshot\" git uses to manage the state of the project, also known as the index. git add <file_list> Insert a short message of the changes made to store the contents of the index with a descriptive message. git commit -m \"Insert a short message of the changes made here\" Push the changes to the remote repository git push origin branch-name-here. Submit a pull request to the upstream repository. Title the pull request with a short description of the changes made and the issue or bug number associated with your change. For example, you can title an issue like so \"Added more log outputting to resolve #4352\". In the description of the pull request, explain the changes that you made, any issues you think exist with the pull request you made, and any questions you have for the maintainer. It's OK if your pull request is not perfect (no pull request is), the reviewer will be able to help you fix any problems and improve it! Wait for the pull request to be reviewed by a maintainer. Make changes to the pull request if the reviewing maintainer recommends them. Celebrate your success after your pull request is merged! Getting Help If you need help, you can ask questions on the issue tracker","title":"Contributing Guide"},{"location":"CONTRIBUTING/#contributing-guide","text":"First off, thanks for taking the time to contribute!","title":"Contributing Guide"},{"location":"CONTRIBUTING/#the-basics","text":"If you are looking to help to with a code contribution this project uses MKDocs for documentation generation, Python for the plugin, along with a splattering of Markdown and ShellScript . I've included my VSCode workspace and a Docker development container. Read about how I develop using VSCode and Docker . If you don't feel ready to make a code contribution yet, no problem! You can also check out the issues we have in the Github issue tracker .","title":"The Basics"},{"location":"CONTRIBUTING/#how-to-contribute","text":"Never made an open-source contribution before? Wondering how contributions work in this project? Here's a quick rundown! Find an issue that you are interested in addressing or a feature that you would like to add in the issue tracker . Don't see your issue? Submit one! Fork the repository associated with the issue to your local GitHub account. This means that you will have a copy of the repository under your-GitHub-username/repository-name. Clone the repository to your local machine. git clone https://github.com/github-username/mkdocs-simple-plugin.git Create a new branch for your fix. git checkout -b branch-name-here Make the appropriate changes for the issue you are trying to address or the feature that you want to add. Add the file contents of the changed files to the \"snapshot\" git uses to manage the state of the project, also known as the index. git add <file_list> Insert a short message of the changes made to store the contents of the index with a descriptive message. git commit -m \"Insert a short message of the changes made here\" Push the changes to the remote repository git push origin branch-name-here. Submit a pull request to the upstream repository. Title the pull request with a short description of the changes made and the issue or bug number associated with your change. For example, you can title an issue like so \"Added more log outputting to resolve #4352\". In the description of the pull request, explain the changes that you made, any issues you think exist with the pull request you made, and any questions you have for the maintainer. It's OK if your pull request is not perfect (no pull request is), the reviewer will be able to help you fix any problems and improve it! Wait for the pull request to be reviewed by a maintainer. Make changes to the pull request if the reviewing maintainer recommends them. Celebrate your success after your pull request is merged!","title":"How to Contribute"},{"location":"CONTRIBUTING/#getting-help","text":"If you need help, you can ask questions on the issue tracker","title":"Getting Help"},{"location":"action/","text":"Deploy from GitHub Actions Create a YAML file with the following contents in the .github/workflows directory in your repository jobs : docs : runs-on : ubuntu-latest steps : - name : Checkout uses : actions/checkout@v2 - name : Build docs uses : athackst/mkdocs-simple-plugin with : # (optional) Specify branch publish_branch : gh-pages # (optional) The URL of the repository the docs should point to repo_url : https://github.com/owner/repository # (optional) The name of the site site_name : owner/repository # (optional) The URL of the site site_url : https://owner.github.io/repository","title":"Github Action"},{"location":"action/#deploy-from-github-actions","text":"Create a YAML file with the following contents in the .github/workflows directory in your repository jobs : docs : runs-on : ubuntu-latest steps : - name : Checkout uses : actions/checkout@v2 - name : Build docs uses : athackst/mkdocs-simple-plugin with : # (optional) Specify branch publish_branch : gh-pages # (optional) The URL of the repository the docs should point to repo_url : https://github.com/owner/repository # (optional) The name of the site site_name : owner/repository # (optional) The URL of the site site_url : https://owner.github.io/repository","title":"Deploy from GitHub Actions"},{"location":"docker/","text":"Docker Use this image to create a mkdocs site with the mkdocs-simple-plugin By using the docker image, you don't need to have the plugin or its dependencies installed on your system to build, test, and deploy a mkdocs generated site. Run in a docker container Install, build and serve your docs: docker run --rm -it --network = host -v ${ PWD } :/docs --user $( id -u ) : $( id -g ) athackst/mkdocs-simple-plugin Explanation of docker command-line options command description -p 8000:8000 [required] Map the mkdocs server port to a port on your localhost. -v ${PWD}:/docs [required] Mount the local directory into the docs directory to build site. --user $(id -u):$(id -g) [recommended] Run the docker container with the current user and group. --rm [optional] remove the docker image after it finishes running. -it [optional] run in an interactive terminal. The docker image runs mkdocs serve by default. Set up a command-line alias Add an alias for the docker command to serve docs from any workspace. echo 'function mkdocs_simple() { local port=${1:-\"8000\"} docker run --rm -p ${port}:8000 -v ${PWD}:/docs --user $(id -u):$(id -g) athackst/mkdocs-simple-plugin }' >> ~/.bashrc","title":"Docker"},{"location":"docker/#docker","text":"Use this image to create a mkdocs site with the mkdocs-simple-plugin By using the docker image, you don't need to have the plugin or its dependencies installed on your system to build, test, and deploy a mkdocs generated site.","title":"Docker"},{"location":"docker/#run-in-a-docker-container","text":"Install, build and serve your docs: docker run --rm -it --network = host -v ${ PWD } :/docs --user $( id -u ) : $( id -g ) athackst/mkdocs-simple-plugin Explanation of docker command-line options command description -p 8000:8000 [required] Map the mkdocs server port to a port on your localhost. -v ${PWD}:/docs [required] Mount the local directory into the docs directory to build site. --user $(id -u):$(id -g) [recommended] Run the docker container with the current user and group. --rm [optional] remove the docker image after it finishes running. -it [optional] run in an interactive terminal. The docker image runs mkdocs serve by default.","title":"Run in a docker container"},{"location":"docker/#set-up-a-command-line-alias","text":"Add an alias for the docker command to serve docs from any workspace. echo 'function mkdocs_simple() { local port=${1:-\"8000\"} docker run --rm -p ${port}:8000 -v ${PWD}:/docs --user $(id -u):$(id -g) athackst/mkdocs-simple-plugin }' >> ~/.bashrc","title":"Set up a command-line alias"},{"location":"examples/ok-mkdocs-docs/docs/","text":"Just a docs folder This example shows how this plugin can be used with just a docs directory Configuration Folder structure: ok-mkdocs-docs \u2502 \u2514\u2500\u2500\u2500docs \u2502 \u2502 README.md Output ok-mkdocs-docs \u2502 \u2514\u2500\u2500\u2500docs \u2502 \u2502 README.md \u2502 \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html","title":"Just a docs folder"},{"location":"examples/ok-mkdocs-docs/docs/#just-a-docs-folder","text":"This example shows how this plugin can be used with just a docs directory","title":"Just a docs folder"},{"location":"examples/ok-mkdocs-docs/docs/#configuration","text":"Folder structure: ok-mkdocs-docs \u2502 \u2514\u2500\u2500\u2500docs \u2502 \u2502 README.md","title":"Configuration"},{"location":"examples/ok-mkdocs-docs/docs/#output","text":"ok-mkdocs-docs \u2502 \u2514\u2500\u2500\u2500docs \u2502 \u2502 README.md \u2502 \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html","title":"Output"},{"location":"examples/ok-mkdocs-docs-extensions/","text":"Include an extra extension This example shows how extensions are copied to the result Configuration mkdocs.yml plugins : - simple : include_extensions : [ \".txt\" ] site_name : ok-mkdocs-docs-extensions Folder structure: ok-mkdocs-docs-extensions \u2502 README.md \u2502 test.txt Output ok-mkdocs-docs-extensions \u2502 README.md \u2502 test.txt \u2502 \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html \u2502 \u2502 test.txt","title":"Include an extra extension"},{"location":"examples/ok-mkdocs-docs-extensions/#include-an-extra-extension","text":"This example shows how extensions are copied to the result","title":"Include an extra extension"},{"location":"examples/ok-mkdocs-docs-extensions/#configuration","text":"mkdocs.yml plugins : - simple : include_extensions : [ \".txt\" ] site_name : ok-mkdocs-docs-extensions Folder structure: ok-mkdocs-docs-extensions \u2502 README.md \u2502 test.txt","title":"Configuration"},{"location":"examples/ok-mkdocs-docs-extensions/#output","text":"ok-mkdocs-docs-extensions \u2502 README.md \u2502 test.txt \u2502 \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html \u2502 \u2502 test.txt","title":"Output"},{"location":"examples/ok-mkdocs-docs-ignore/","text":"Ignore a folder This example shows how a subfolder can be ignored. Configuration mkdocs.yml plugins : - simple : ignore_folders : [ \"subfolder\" ] site_name : ok-mkdocs-docs-ignore Folder structure: project \u2502 README.md | test.md | \u2514\u2500\u2500\u2500subfolder | | draft.md | | index.md Output project \u2502 README.md | test.md | \u2514\u2500\u2500\u2500subfolder | | draft.md | | index.md README.md \u2502 \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html | | | \u2514\u2500\u2500\u2500test \u2502 \u2502 | index.html","title":"Ignore a folder"},{"location":"examples/ok-mkdocs-docs-ignore/#ignore-a-folder","text":"This example shows how a subfolder can be ignored.","title":"Ignore a folder"},{"location":"examples/ok-mkdocs-docs-ignore/#configuration","text":"mkdocs.yml plugins : - simple : ignore_folders : [ \"subfolder\" ] site_name : ok-mkdocs-docs-ignore Folder structure: project \u2502 README.md | test.md | \u2514\u2500\u2500\u2500subfolder | | draft.md | | index.md","title":"Configuration"},{"location":"examples/ok-mkdocs-docs-ignore/#output","text":"project \u2502 README.md | test.md | \u2514\u2500\u2500\u2500subfolder | | draft.md | | index.md README.md \u2502 \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html | | | \u2514\u2500\u2500\u2500test \u2502 \u2502 | index.html","title":"Output"},{"location":"examples/ok-mkdocs-docs-ignore/test/","text":"Test This is a test file.","title":"Test"},{"location":"examples/ok-mkdocs-docs-ignore/test/#test","text":"This is a test file.","title":"Test"},{"location":"examples/ok-mkdocs-docs-ignore/subfolder/","text":"Hello World This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-ignore/subfolder/#hello-world","text":"This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-ignore/subfolder/draft/","text":"Draft This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-docs-ignore/subfolder/draft/#draft","text":"This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-docs-include/","text":"Only include a subfolder This example shows how to only include from a specific folder Configuration mkdocs.yml plugins : - simple : include_folders : [ \"./subfolder**\" ] site_name : ok-mkdocs-docs-include Folder structure: project \u2502 README.md | test.md | \u2514\u2500\u2500\u2500subfolder | | draft.md | | index.md Output project \u2502 README.md | test.md | \u2514\u2500\u2500\u2500subfolder | | draft.md | | index.md \u2502 \u2514\u2500\u2500\u2500site | | | \u2514\u2500\u2500\u2500subfolder \u2502 \u2502 index.html [From subfolder/index.md, not from README.md] | | | \u2514\u2500\u2500\u2500draft \u2502 \u2502 | index.html","title":"Only include a subfolder"},{"location":"examples/ok-mkdocs-docs-include/#only-include-a-subfolder","text":"This example shows how to only include from a specific folder","title":"Only include a subfolder"},{"location":"examples/ok-mkdocs-docs-include/#configuration","text":"mkdocs.yml plugins : - simple : include_folders : [ \"./subfolder**\" ] site_name : ok-mkdocs-docs-include Folder structure: project \u2502 README.md | test.md | \u2514\u2500\u2500\u2500subfolder | | draft.md | | index.md","title":"Configuration"},{"location":"examples/ok-mkdocs-docs-include/#output","text":"project \u2502 README.md | test.md | \u2514\u2500\u2500\u2500subfolder | | draft.md | | index.md \u2502 \u2514\u2500\u2500\u2500site | | | \u2514\u2500\u2500\u2500subfolder \u2502 \u2502 index.html [From subfolder/index.md, not from README.md] | | | \u2514\u2500\u2500\u2500draft \u2502 \u2502 | index.html","title":"Output"},{"location":"examples/ok-mkdocs-docs-include/test/","text":"Test This is a test file.","title":"Test"},{"location":"examples/ok-mkdocs-docs-include/test/#test","text":"This is a test file.","title":"Test"},{"location":"examples/ok-mkdocs-docs-include/subfolder/","text":"Hello World This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-include/subfolder/#hello-world","text":"This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-include/subfolder/draft/","text":"Draft This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-docs-include/subfolder/draft/#draft","text":"This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-docs-merge/","text":"Merge docs folder with other docs This example shows how to merge a docs folder with other documentation. Configuration mkdocs.yml plugins : - simple site_name : ok-mkdocs-docs-merge Folder structure: project \u2502 README.md | test.md | \u2514\u2500\u2500\u2500docs | | draft.md | | index.md Output project \u2502 README.md | test.md | \u2514\u2500\u2500\u2500docs | | draft.md | | index.md \u2502 \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html [From docs/index.md, _not_ from README] | | | \u2514\u2500\u2500\u2500draft \u2502 \u2502 | index.html | | | \u2514\u2500\u2500\u2500test \u2502 \u2502 | index.html","title":"Merge docs folder with other docs"},{"location":"examples/ok-mkdocs-docs-merge/#merge-docs-folder-with-other-docs","text":"This example shows how to merge a docs folder with other documentation.","title":"Merge docs folder with other docs"},{"location":"examples/ok-mkdocs-docs-merge/#configuration","text":"mkdocs.yml plugins : - simple site_name : ok-mkdocs-docs-merge Folder structure: project \u2502 README.md | test.md | \u2514\u2500\u2500\u2500docs | | draft.md | | index.md","title":"Configuration"},{"location":"examples/ok-mkdocs-docs-merge/#output","text":"project \u2502 README.md | test.md | \u2514\u2500\u2500\u2500docs | | draft.md | | index.md \u2502 \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html [From docs/index.md, _not_ from README] | | | \u2514\u2500\u2500\u2500draft \u2502 \u2502 | index.html | | | \u2514\u2500\u2500\u2500test \u2502 \u2502 | index.html","title":"Output"},{"location":"examples/ok-mkdocs-docs-merge/test/","text":"Test This is a test file.","title":"Test"},{"location":"examples/ok-mkdocs-docs-merge/test/#test","text":"This is a test file.","title":"Test"},{"location":"examples/ok-mkdocs-docs-merge/docs/","text":"Hello World This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-merge/docs/#hello-world","text":"This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-merge/docs/draft/","text":"Draft This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-docs-merge/docs/draft/#draft","text":"This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-docs-no-merge/","text":"Don't merge docs folder with other docs This example shows how to keep the docs folder embedded within your other docs. Configuration mkdocs.yml plugins : - simple : merge_docs_dir : false site_name : ok-mkdocs-docs-merge Folder structure: project \u2502 README.md | test.md | \u2514\u2500\u2500\u2500docs | | draft.md | | index.md Output project \u2502 README.md | test.md | \u2514\u2500\u2500\u2500docs | | draft.md | | index.md \u2502 \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html [From README.md] | | | \u2514\u2500\u2500\u2500test \u2502 \u2502 | index.html | | | \u2514\u2500\u2500\u2500docs \u2502 \u2502 | index.html [From docs/index.md] | | | | | \u2514\u2500\u2500\u2500draft \u2502 \u2502 | | index.html","title":"Don't merge docs folder with other docs"},{"location":"examples/ok-mkdocs-docs-no-merge/#dont-merge-docs-folder-with-other-docs","text":"This example shows how to keep the docs folder embedded within your other docs.","title":"Don't merge docs folder with other docs"},{"location":"examples/ok-mkdocs-docs-no-merge/#configuration","text":"mkdocs.yml plugins : - simple : merge_docs_dir : false site_name : ok-mkdocs-docs-merge Folder structure: project \u2502 README.md | test.md | \u2514\u2500\u2500\u2500docs | | draft.md | | index.md","title":"Configuration"},{"location":"examples/ok-mkdocs-docs-no-merge/#output","text":"project \u2502 README.md | test.md | \u2514\u2500\u2500\u2500docs | | draft.md | | index.md \u2502 \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html [From README.md] | | | \u2514\u2500\u2500\u2500test \u2502 \u2502 | index.html | | | \u2514\u2500\u2500\u2500docs \u2502 \u2502 | index.html [From docs/index.md] | | | | | \u2514\u2500\u2500\u2500draft \u2502 \u2502 | | index.html","title":"Output"},{"location":"examples/ok-mkdocs-docs-no-merge/test/","text":"Test This is a test file.","title":"Test"},{"location":"examples/ok-mkdocs-docs-no-merge/test/#test","text":"This is a test file.","title":"Test"},{"location":"examples/ok-mkdocs-docs-no-merge/docs/","text":"Hello World This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-no-merge/docs/#hello-world","text":"This is for testing files in the docs directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-docs-no-merge/docs/draft/","text":"Draft This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-docs-no-merge/docs/draft/#draft","text":"This is a draft file.","title":"Draft"},{"location":"examples/ok-mkdocs-ignore-site-dir/","text":"Hello World This is for testing files in the main directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-ignore-site-dir/#hello-world","text":"This is for testing files in the main directory.","title":"Hello World"},{"location":"examples/ok-mkdocs-readme/","text":"Only a single readme This is the simplest documentation site you could have. It's just a simple readme. Folder structure: project \u2502 README.md Output project \u2502 README.md \u2502 \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html","title":"Only a single readme"},{"location":"examples/ok-mkdocs-readme/#only-a-single-readme","text":"This is the simplest documentation site you could have. It's just a simple readme. Folder structure: project \u2502 README.md","title":"Only a single readme"},{"location":"examples/ok-mkdocs-readme/#output","text":"project \u2502 README.md \u2502 \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html","title":"Output"},{"location":"examples/ok-source-extract/","text":"Extract markdown from a source file You can even extract markdown from a source file! Configuration mkdocs.yml site_name : Example source extraction nav : - About : README.md - C Implementation : main.md - Python Implementation : module.md Folder structure: project \u2502 README.md | module.py | main.c Output project \u2502 README.md | module.py | main.c | \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html | | | \u2514\u2500\u2500\u2500module \u2502 \u2502 | index.html | | | \u2514\u2500\u2500\u2500main \u2502 \u2502 | index.html","title":"Extract markdown from a source file"},{"location":"examples/ok-source-extract/#extract-markdown-from-a-source-file","text":"You can even extract markdown from a source file!","title":"Extract markdown from a source file"},{"location":"examples/ok-source-extract/#configuration","text":"mkdocs.yml site_name : Example source extraction nav : - About : README.md - C Implementation : main.md - Python Implementation : module.md Folder structure: project \u2502 README.md | module.py | main.c","title":"Configuration"},{"location":"examples/ok-source-extract/#output","text":"project \u2502 README.md | module.py | main.c | \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html | | | \u2514\u2500\u2500\u2500module \u2502 \u2502 | index.html | | | \u2514\u2500\u2500\u2500main \u2502 \u2502 | index.html","title":"Output"},{"location":"examples/ok-source-extract/main/","text":"Detailed documentation block comments block comments are added with /** md and conclude with **\\/ tags. line comments line comments are added with // md and conclude with // end md tags","title":"Main"},{"location":"examples/ok-source-extract/main/#detailed-documentation","text":"","title":"Detailed documentation"},{"location":"examples/ok-source-extract/main/#block-comments","text":"block comments are added with /** md and conclude with **\\/ tags.","title":"block comments"},{"location":"examples/ok-source-extract/main/#line-comments","text":"line comments are added with // md and conclude with // end md tags","title":"line comments"},{"location":"examples/ok-source-extract/module/","text":"Python Version You can put markdown in triple-quoted strings in Python. inline comments It works in inline comments. The start and end markers must be on their own lines. docstrings It works in docstrings. The start and end quotes must be on their own lines. Drawback: simple does not remove leading whitespace.","title":"Module"},{"location":"examples/ok-source-extract/module/#python-version","text":"You can put markdown in triple-quoted strings in Python.","title":"Python Version"},{"location":"examples/ok-source-extract/module/#inline-comments","text":"It works in inline comments. The start and end markers must be on their own lines.","title":"inline comments"},{"location":"examples/ok-source-extract/module/#docstrings","text":"It works in docstrings. The start and end quotes must be on their own lines. Drawback: simple does not remove leading whitespace.","title":"docstrings"},{"location":"examples/ok-with-macros/","text":"Use with the macros plugin You can even use this with other plugins, like macros to achieve advanced configurations. Example Here's a print out of the plugin's config file, which I've included using a jinja-style macro. site_name : athackst/mkdocs-simple-plugin site_url : https://athackst.github.io/mkdocs-simple-plugin repo_url : https://github.com/athackst/mkdocs-simple-plugin docs_dir : /tmp/mkdocs-simple/mkdocs-simple-plugin plugins : - search - simple : include_extensions : - .yml - .png - .pages - macros - mkdocstrings : handlers : python : setup_commands : - import sys - sys.path.append('examples/ok-with-mkdocstrings') - awesome-pages theme : name : material palette : primary : green accent : green markdown_extensions : - admonition - pymdownx.superfences - pymdownx.highlight : use_pygments : true - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji '' emoji_generator : !!python/name:materialx.emoji.to_svg '' extra : social : - icon : fontawesome/brands/twitter link : https://twitter.com/althack - icon : fontawesome/brands/docker link : https://hub.docker.com/u/athackst - icon : fontawesome/regular/laugh link : https://allisonthackston.com edit_uri : '' And the extracted module documentation also includes the config file. extracted: ## Python Version You can put _markdown_ in triple-quoted strings in Python. You can even use macros to inject other markdown here! For example, here's the config file: ```yaml site_name: athackst/mkdocs-simple-plugin site_url: https://athackst.github.io/mkdocs-simple-plugin repo_url: https://github.com/athackst/mkdocs-simple-plugin docs_dir: /tmp/mkdocs-simple/mkdocs-simple-plugin plugins: - search - simple: include_extensions: - .yml - .png - .pages - macros - mkdocstrings: handlers: python: setup_commands: - import sys - sys.path.append('examples/ok-with-mkdocstrings') - awesome-pages theme: name: material palette: primary: green accent: green markdown_extensions: - admonition - pymdownx.superfences - pymdownx.highlight: use_pygments: true - pymdownx.emoji: emoji_index: !!python/name:materialx.emoji.twemoji '' emoji_generator: !!python/name:materialx.emoji.to_svg '' extra: social: - icon: fontawesome/brands/twitter link: https://twitter.com/althack - icon: fontawesome/brands/docker link: https://hub.docker.com/u/athackst - icon: fontawesome/regular/laugh link: https://allisonthackston.com edit_uri: '' ``` Configuration mkdocs.yml site_name : ok-with-macros docs_dir : /tmp/mkdocs-simple/ok-with-macros/docs plugins : - search : null - simple : include_extensions : - '.yml' - macros : verbose : True extra : test : True Folder structure: project \u2502 README.md | module.py Output project \u2502 README.md | module.py | \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html | | | \u2514\u2500\u2500\u2500module \u2502 \u2502 | index.html","title":"Use with the macros plugin"},{"location":"examples/ok-with-macros/#use-with-the-macros-plugin","text":"You can even use this with other plugins, like macros to achieve advanced configurations.","title":"Use with the macros plugin"},{"location":"examples/ok-with-macros/#example","text":"Here's a print out of the plugin's config file, which I've included using a jinja-style macro. site_name : athackst/mkdocs-simple-plugin site_url : https://athackst.github.io/mkdocs-simple-plugin repo_url : https://github.com/athackst/mkdocs-simple-plugin docs_dir : /tmp/mkdocs-simple/mkdocs-simple-plugin plugins : - search - simple : include_extensions : - .yml - .png - .pages - macros - mkdocstrings : handlers : python : setup_commands : - import sys - sys.path.append('examples/ok-with-mkdocstrings') - awesome-pages theme : name : material palette : primary : green accent : green markdown_extensions : - admonition - pymdownx.superfences - pymdownx.highlight : use_pygments : true - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji '' emoji_generator : !!python/name:materialx.emoji.to_svg '' extra : social : - icon : fontawesome/brands/twitter link : https://twitter.com/althack - icon : fontawesome/brands/docker link : https://hub.docker.com/u/athackst - icon : fontawesome/regular/laugh link : https://allisonthackston.com edit_uri : '' And the extracted module documentation also includes the config file. extracted: ## Python Version You can put _markdown_ in triple-quoted strings in Python. You can even use macros to inject other markdown here! For example, here's the config file: ```yaml site_name: athackst/mkdocs-simple-plugin site_url: https://athackst.github.io/mkdocs-simple-plugin repo_url: https://github.com/athackst/mkdocs-simple-plugin docs_dir: /tmp/mkdocs-simple/mkdocs-simple-plugin plugins: - search - simple: include_extensions: - .yml - .png - .pages - macros - mkdocstrings: handlers: python: setup_commands: - import sys - sys.path.append('examples/ok-with-mkdocstrings') - awesome-pages theme: name: material palette: primary: green accent: green markdown_extensions: - admonition - pymdownx.superfences - pymdownx.highlight: use_pygments: true - pymdownx.emoji: emoji_index: !!python/name:materialx.emoji.twemoji '' emoji_generator: !!python/name:materialx.emoji.to_svg '' extra: social: - icon: fontawesome/brands/twitter link: https://twitter.com/althack - icon: fontawesome/brands/docker link: https://hub.docker.com/u/athackst - icon: fontawesome/regular/laugh link: https://allisonthackston.com edit_uri: '' ```","title":"Example"},{"location":"examples/ok-with-macros/#configuration","text":"mkdocs.yml site_name : ok-with-macros docs_dir : /tmp/mkdocs-simple/ok-with-macros/docs plugins : - search : null - simple : include_extensions : - '.yml' - macros : verbose : True extra : test : True Folder structure: project \u2502 README.md | module.py","title":"Configuration"},{"location":"examples/ok-with-macros/#output","text":"project \u2502 README.md | module.py | \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html | | | \u2514\u2500\u2500\u2500module \u2502 \u2502 | index.html","title":"Output"},{"location":"examples/ok-with-macros/module/","text":"Python Version You can put markdown in triple-quoted strings in Python. You can even use macros to inject other markdown here! For example, here's the config file: site_name : athackst/mkdocs-simple-plugin site_url : https://athackst.github.io/mkdocs-simple-plugin repo_url : https://github.com/athackst/mkdocs-simple-plugin docs_dir : /tmp/mkdocs-simple/mkdocs-simple-plugin plugins : - search - simple : include_extensions : - .yml - .png - .pages - macros - mkdocstrings : handlers : python : setup_commands : - import sys - sys.path.append('examples/ok-with-mkdocstrings') - awesome-pages theme : name : material palette : primary : green accent : green markdown_extensions : - admonition - pymdownx.superfences - pymdownx.highlight : use_pygments : true - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji '' emoji_generator : !!python/name:materialx.emoji.to_svg '' extra : social : - icon : fontawesome/brands/twitter link : https://twitter.com/althack - icon : fontawesome/brands/docker link : https://hub.docker.com/u/athackst - icon : fontawesome/regular/laugh link : https://allisonthackston.com edit_uri : ''","title":"Module"},{"location":"examples/ok-with-macros/module/#python-version","text":"You can put markdown in triple-quoted strings in Python. You can even use macros to inject other markdown here! For example, here's the config file: site_name : athackst/mkdocs-simple-plugin site_url : https://athackst.github.io/mkdocs-simple-plugin repo_url : https://github.com/athackst/mkdocs-simple-plugin docs_dir : /tmp/mkdocs-simple/mkdocs-simple-plugin plugins : - search - simple : include_extensions : - .yml - .png - .pages - macros - mkdocstrings : handlers : python : setup_commands : - import sys - sys.path.append('examples/ok-with-mkdocstrings') - awesome-pages theme : name : material palette : primary : green accent : green markdown_extensions : - admonition - pymdownx.superfences - pymdownx.highlight : use_pygments : true - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji '' emoji_generator : !!python/name:materialx.emoji.to_svg '' extra : social : - icon : fontawesome/brands/twitter link : https://twitter.com/althack - icon : fontawesome/brands/docker link : https://hub.docker.com/u/athackst - icon : fontawesome/regular/laugh link : https://allisonthackston.com edit_uri : ''","title":"Python Version"},{"location":"examples/ok-with-mkdocstrings/","text":"Use with mkdocstrings You can even use this with other plugins, like mkdocstrings , to achieve advanced configurations. Example The extracted module documentation includes the documentation from the module header, and has invoked mkdocstrings to render api documentation based on Python docstrings. Compare the webpage linked above with the raw module.md generated by extraction from module.py : ## Python Version You can put _markdown_ in triple-quoted strings in Python. You can even combine it with mkdocstrings to automatically generate your source documentation! ::: module.main handler: python rendering: show_root_heading: true show_source: false heading_level: 3 Configuration mkdocs.yml plugins : - simple : - mkdocstrings : site_name : ok-with-mkdocstrings Folder structure: project \u2502 README.md | module.py Output project \u2502 README.md | module.py | \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html | | | \u2514\u2500\u2500\u2500module \u2502 \u2502 | index.html","title":"Use with mkdocstrings"},{"location":"examples/ok-with-mkdocstrings/#use-with-mkdocstrings","text":"You can even use this with other plugins, like mkdocstrings , to achieve advanced configurations.","title":"Use with mkdocstrings"},{"location":"examples/ok-with-mkdocstrings/#example","text":"The extracted module documentation includes the documentation from the module header, and has invoked mkdocstrings to render api documentation based on Python docstrings. Compare the webpage linked above with the raw module.md generated by extraction from module.py : ## Python Version You can put _markdown_ in triple-quoted strings in Python. You can even combine it with mkdocstrings to automatically generate your source documentation! ::: module.main handler: python rendering: show_root_heading: true show_source: false heading_level: 3","title":"Example"},{"location":"examples/ok-with-mkdocstrings/#configuration","text":"mkdocs.yml plugins : - simple : - mkdocstrings : site_name : ok-with-mkdocstrings Folder structure: project \u2502 README.md | module.py","title":"Configuration"},{"location":"examples/ok-with-mkdocstrings/#output","text":"project \u2502 README.md | module.py | \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html | | | \u2514\u2500\u2500\u2500module \u2502 \u2502 | index.html","title":"Output"},{"location":"examples/ok-with-mkdocstrings/module/","text":"Python Version You can put markdown in triple-quoted strings in Python. You can even combine it with mkdocstrings to automatically generate your source documentation! module . main () Test function which takes no parameters. It says \"Hello, world!\"","title":"Module"},{"location":"examples/ok-with-mkdocstrings/module/#python-version","text":"You can put markdown in triple-quoted strings in Python. You can even combine it with mkdocstrings to automatically generate your source documentation!","title":"Python Version"},{"location":"examples/ok-with-mkdocstrings/module/#module.main","text":"Test function which takes no parameters. It says \"Hello, world!\"","title":"main()"},{"location":"examples/ok-with-rename/","text":"One-off rename This example shows how to rename a single file in the doc site. Configuration mkdocs.yml plugins : - simple : semiliterate : - pattern : '^foo.bar$' destination : baz.md site_name : ok-with-rename Folder structure: project \u2502 README.md | foo.bar Output project \u2502 README.md | foo.bar | \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html | | | \u2514\u2500\u2500\u2500baz | \u2502 index.html","title":"One-off rename"},{"location":"examples/ok-with-rename/#one-off-rename","text":"This example shows how to rename a single file in the doc site.","title":"One-off rename"},{"location":"examples/ok-with-rename/#configuration","text":"mkdocs.yml plugins : - simple : semiliterate : - pattern : '^foo.bar$' destination : baz.md site_name : ok-with-rename Folder structure: project \u2502 README.md | foo.bar","title":"Configuration"},{"location":"examples/ok-with-rename/#output","text":"project \u2502 README.md | foo.bar | \u2514\u2500\u2500\u2500site \u2502 \u2502 index.html | | | \u2514\u2500\u2500\u2500baz | \u2502 index.html","title":"Output"},{"location":"mkdocs_simple_plugin/","text":"Developing Prerequisites You will need to have MKDocs installed on your system. I recommend installing it via pip to get the latest version. sudo apt-get install python-pip pip install --upgrade pip --user pip install mkdocs --user If you want to run the test suite, you'll also need 'bats' sudo apt-get install bats Local install Install the package locally with pip install -e . Testing Testing involves both linting with flake8 ./tests/test_flake8.sh and testing with bats ./tests/integration/test.bats If you want to test against all the different versions of python, run the local test script. ./tests/test_local.sh VSCode Included in this package is a VSCode workspace and development container. See how I develop with VSCode and Docker and how I use VSCode tasks .","title":"Developing"},{"location":"mkdocs_simple_plugin/#developing","text":"","title":"Developing"},{"location":"mkdocs_simple_plugin/#prerequisites","text":"You will need to have MKDocs installed on your system. I recommend installing it via pip to get the latest version. sudo apt-get install python-pip pip install --upgrade pip --user pip install mkdocs --user If you want to run the test suite, you'll also need 'bats' sudo apt-get install bats","title":"Prerequisites"},{"location":"mkdocs_simple_plugin/#local-install","text":"Install the package locally with pip install -e .","title":"Local install"},{"location":"mkdocs_simple_plugin/#testing","text":"Testing involves both linting with flake8 ./tests/test_flake8.sh and testing with bats ./tests/integration/test.bats If you want to test against all the different versions of python, run the local test script. ./tests/test_local.sh","title":"Testing"},{"location":"mkdocs_simple_plugin/#vscode","text":"Included in this package is a VSCode workspace and development container. See how I develop with VSCode and Docker and how I use VSCode tasks .","title":"VSCode"},{"location":"mkdocs_simple_plugin/generator/","text":"Mkdocs Simple Generator mkdocs_simple_gen is a program that will automatically create a mkdocs.yml configuration file (only if needed) and optionally install dependencies, build, and serve the site. Installation Install the plugin with pip. pip install mkdocs-simple-plugin Python 3.x, 3.6, 3.7, 3.8, 3.9 supported. Usage mkdocs_simple_gen Command line options See --help Usage: mkdocs_simple_gen [OPTIONS] Options: --build / --no-build build the site using mkdocs build --serve / --no-serve serve the site using mkdocs serve --help Show this message and exit. default flags: mkdocs_simple_gen --build --no-serve","title":"Mkdocs Simple Generator"},{"location":"mkdocs_simple_plugin/generator/#mkdocs-simple-generator","text":"mkdocs_simple_gen is a program that will automatically create a mkdocs.yml configuration file (only if needed) and optionally install dependencies, build, and serve the site.","title":"Mkdocs Simple Generator"},{"location":"mkdocs_simple_plugin/generator/#installation","text":"Install the plugin with pip. pip install mkdocs-simple-plugin Python 3.x, 3.6, 3.7, 3.8, 3.9 supported.","title":"Installation"},{"location":"mkdocs_simple_plugin/generator/#usage","text":"mkdocs_simple_gen","title":"Usage"},{"location":"mkdocs_simple_plugin/generator/#command-line-options","text":"See --help Usage: mkdocs_simple_gen [OPTIONS] Options: --build / --no-build build the site using mkdocs build --serve / --no-serve serve the site using mkdocs serve --help Show this message and exit. default flags: mkdocs_simple_gen --build --no-serve","title":"Command line options"},{"location":"mkdocs_simple_plugin/plugin/","text":"Mkdocs Simple Plugin A plugin for MkDocs that builds a documentation website from markdown content interspersed within your code, in markdown files or in block comments in your source files. simple will search your project directory tree for documentation. By default, Markdown files and graphics files will be copied to your documentation site. Source files will also be searched for markdown embedded in minimally-structured comment blocks; these will be extracted into additional markdown files included in the documentation site. Installation Install the plugin with pip. pip install mkdocs-simple-plugin Python 3.x, 3.5, 3.6, 3.7, 3.8, 3.9 supported. Quick start Configuration file Create a mkdocs.yml file in the root of your directory and add the simple plugin to its plugin list. site_name : \"My site\" plugins : - search : - simple : Build Then, you can build the mkdocs from the command line. mkdocs build Run a local server One of the best parts of mkdocs is the ability to serve (and update!) your documentation site locally. mkdocs serve Configuration scheme include_folders Directories whose name matches a glob pattern in this list will be searched for documentation ignore_folders Directories whose name matches a glob pattern in this list will NOT be searched for documentation. ignore_hidden Hidden directories will not be searched if this is true. merge_docs_dir If true, the contents of the docs directory (if any) will be merged at the same level as all other documentation. Otherwise, the docs directory will be retained as a subdirectory in the result. include_extensions Any file in the searched directories whose name contains a string in this list will simply be copied to the generated documentation. semiliterate The semiliterate settings allows the extraction of markdown from inside source files. It is defined as a list of blocks of settings for different filename patterns (typically matching filename extensions). All regular expression parameters use ordinary Python re syntax. The settings in each block are: pattern Any file in the searched directories whose name contains this required regular expression parameter will be scanned. destination By default, the extracted documentation will be copied to a file whose name is generated by removing the (last) extension from the original filename, if any, and appending .md . However, if this parameter is specified, it will be expanded as a template using the match object from matching \"pattern\" against the filename, to produce the name of the destination file. terminate If specified, all extraction from the file is terminated when a line containing this regexp is encountered (whether or not any extraction is currently active per the parameters below). The last matching group in the terminate expression, if any, is written to the destination file; note that \"start\" and \"stop\" below share that same behavior. extract This parameter determines what will be extracted from a scanned file that matches the pattern above. Its value should be a block or list of blocks of settings. Each block determines one mode of extraction from the scanned file, and can specify: start If no mode of extraction is active, and a line in the scanned file matches this regexp, then this mode of extraction begins with the next line. Only the first mode whose start expression matches is activated, so at most one mode of extraction can be active at any time. When an extraction is active, lines from the scanned file are copied to the destination file (possibly modified by the \"replace\" parameter below). stop When this extraction mode is active and a line containing this (optional) regexp is encountered, this mode becomes inactive. The simple plugin will begin searching for further occurrences of start expressions on the next line of the scanned file. replace The replace parameter allows extracted lines from a file to be transformed in simple ways by regular expressions, for example to strip leading comment symbols if necessary. The replace parameter is a list of substitutions to attempt. Each substitution is specified either by a two-element list of a regular expression and a template, or by just a regular expression. In each extracted line, the regular expression from each substitution in turn is searched for. If none match, the line is transcribed unchanged. For the first one that matches, the template (expanded with the results of the match) is transcribed in place of the line. If there is no template, then just the last matching group is transcribed, or nothing at all is transcribed if there is no last matching group. This latter convention makes it easy to selectively drop lines that contain a given regular expression. Once one of the replace patterns matches, processing stops; no further expressions are checked. Note that the (last) extraction mode (if any) with no start parameter is active beginning with the first line of the scanned file; there is no way such a mode can be reactivated if it stops. This convention allows for convenient \"front-matter\" extraction. Standard behavior The default semiliterate patterns invoke the following automatic extraction of markdown content from your source files: (Note that if you add your own semiliterate patterns but want to also use any of these, you must reiterate the default pattern or patterns you want in your mkdocs.yml file.) Default configuration include_folders : - '*' ignore_folders : [] ignore_hidden : true merge_docs_dir : true include_extensions : - .yml - .png - .pages semiliterate : - pattern : \\.py$ extract : - start : ^\\s*\"\"\"\\W?md\\b stop : '\"\"\"\\s*$' - start : ^\\s*#+\\W?md\\b stop : '#\\s\\/md\\s*$' replace : - ^\\s*# ?(.*\\n?)$ - pattern : \\.(cpp|cc?|hh?|hpp|js|css)$ extract : - start : ^\\s*/\\*+\\W?md\\b stop : \\*\\*/\\s*$ - start : ^\\s*\\/\\/+\\W?md\\b stop : \\/\\/\\send\\smd\\s*$ replace : - ^\\s*\\/\\/\\s?(.*\\n?)$ - pattern : Dockerfile$|\\.(dockerfile|ya?ml)$ extract : - start : ^\\s*#+\\W?md\\b stop : '#\\s\\/md\\s*$' replace : - ^\\s*#?\\s?(.*\\n?)$ - pattern : \\.(html?|xml)$ extract : - start : <!--\\W?md\\b stop : -->\\s*$","title":"Mkdocs Simple Plugin"},{"location":"mkdocs_simple_plugin/plugin/#mkdocs-simple-plugin","text":"A plugin for MkDocs that builds a documentation website from markdown content interspersed within your code, in markdown files or in block comments in your source files. simple will search your project directory tree for documentation. By default, Markdown files and graphics files will be copied to your documentation site. Source files will also be searched for markdown embedded in minimally-structured comment blocks; these will be extracted into additional markdown files included in the documentation site.","title":"Mkdocs Simple Plugin"},{"location":"mkdocs_simple_plugin/plugin/#installation","text":"Install the plugin with pip. pip install mkdocs-simple-plugin Python 3.x, 3.5, 3.6, 3.7, 3.8, 3.9 supported.","title":"Installation"},{"location":"mkdocs_simple_plugin/plugin/#quick-start","text":"","title":"Quick start"},{"location":"mkdocs_simple_plugin/plugin/#configuration-file","text":"Create a mkdocs.yml file in the root of your directory and add the simple plugin to its plugin list. site_name : \"My site\" plugins : - search : - simple :","title":"Configuration file"},{"location":"mkdocs_simple_plugin/plugin/#build","text":"Then, you can build the mkdocs from the command line. mkdocs build","title":"Build"},{"location":"mkdocs_simple_plugin/plugin/#run-a-local-server","text":"One of the best parts of mkdocs is the ability to serve (and update!) your documentation site locally. mkdocs serve","title":"Run a local server"},{"location":"mkdocs_simple_plugin/plugin/#configuration-scheme","text":"","title":"Configuration scheme"},{"location":"mkdocs_simple_plugin/plugin/#include_folders","text":"Directories whose name matches a glob pattern in this list will be searched for documentation","title":"include_folders"},{"location":"mkdocs_simple_plugin/plugin/#ignore_folders","text":"Directories whose name matches a glob pattern in this list will NOT be searched for documentation.","title":"ignore_folders"},{"location":"mkdocs_simple_plugin/plugin/#ignore_hidden","text":"Hidden directories will not be searched if this is true.","title":"ignore_hidden"},{"location":"mkdocs_simple_plugin/plugin/#merge_docs_dir","text":"If true, the contents of the docs directory (if any) will be merged at the same level as all other documentation. Otherwise, the docs directory will be retained as a subdirectory in the result.","title":"merge_docs_dir"},{"location":"mkdocs_simple_plugin/plugin/#include_extensions","text":"Any file in the searched directories whose name contains a string in this list will simply be copied to the generated documentation.","title":"include_extensions"},{"location":"mkdocs_simple_plugin/plugin/#semiliterate","text":"The semiliterate settings allows the extraction of markdown from inside source files. It is defined as a list of blocks of settings for different filename patterns (typically matching filename extensions). All regular expression parameters use ordinary Python re syntax. The settings in each block are:","title":"semiliterate"},{"location":"mkdocs_simple_plugin/plugin/#pattern","text":"Any file in the searched directories whose name contains this required regular expression parameter will be scanned.","title":"pattern"},{"location":"mkdocs_simple_plugin/plugin/#destination","text":"By default, the extracted documentation will be copied to a file whose name is generated by removing the (last) extension from the original filename, if any, and appending .md . However, if this parameter is specified, it will be expanded as a template using the match object from matching \"pattern\" against the filename, to produce the name of the destination file.","title":"destination"},{"location":"mkdocs_simple_plugin/plugin/#terminate","text":"If specified, all extraction from the file is terminated when a line containing this regexp is encountered (whether or not any extraction is currently active per the parameters below). The last matching group in the terminate expression, if any, is written to the destination file; note that \"start\" and \"stop\" below share that same behavior.","title":"terminate"},{"location":"mkdocs_simple_plugin/plugin/#extract","text":"This parameter determines what will be extracted from a scanned file that matches the pattern above. Its value should be a block or list of blocks of settings. Each block determines one mode of extraction from the scanned file, and can specify:","title":"extract"},{"location":"mkdocs_simple_plugin/plugin/#start","text":"If no mode of extraction is active, and a line in the scanned file matches this regexp, then this mode of extraction begins with the next line. Only the first mode whose start expression matches is activated, so at most one mode of extraction can be active at any time. When an extraction is active, lines from the scanned file are copied to the destination file (possibly modified by the \"replace\" parameter below).","title":"start"},{"location":"mkdocs_simple_plugin/plugin/#stop","text":"When this extraction mode is active and a line containing this (optional) regexp is encountered, this mode becomes inactive. The simple plugin will begin searching for further occurrences of start expressions on the next line of the scanned file.","title":"stop"},{"location":"mkdocs_simple_plugin/plugin/#replace","text":"The replace parameter allows extracted lines from a file to be transformed in simple ways by regular expressions, for example to strip leading comment symbols if necessary. The replace parameter is a list of substitutions to attempt. Each substitution is specified either by a two-element list of a regular expression and a template, or by just a regular expression. In each extracted line, the regular expression from each substitution in turn is searched for. If none match, the line is transcribed unchanged. For the first one that matches, the template (expanded with the results of the match) is transcribed in place of the line. If there is no template, then just the last matching group is transcribed, or nothing at all is transcribed if there is no last matching group. This latter convention makes it easy to selectively drop lines that contain a given regular expression. Once one of the replace patterns matches, processing stops; no further expressions are checked. Note that the (last) extraction mode (if any) with no start parameter is active beginning with the first line of the scanned file; there is no way such a mode can be reactivated if it stops. This convention allows for convenient \"front-matter\" extraction.","title":"replace"},{"location":"mkdocs_simple_plugin/plugin/#standard-behavior","text":"The default semiliterate patterns invoke the following automatic extraction of markdown content from your source files: (Note that if you add your own semiliterate patterns but want to also use any of these, you must reiterate the default pattern or patterns you want in your mkdocs.yml file.)","title":"Standard behavior"},{"location":"mkdocs_simple_plugin/plugin/#default-configuration","text":"include_folders : - '*' ignore_folders : [] ignore_hidden : true merge_docs_dir : true include_extensions : - .yml - .png - .pages semiliterate : - pattern : \\.py$ extract : - start : ^\\s*\"\"\"\\W?md\\b stop : '\"\"\"\\s*$' - start : ^\\s*#+\\W?md\\b stop : '#\\s\\/md\\s*$' replace : - ^\\s*# ?(.*\\n?)$ - pattern : \\.(cpp|cc?|hh?|hpp|js|css)$ extract : - start : ^\\s*/\\*+\\W?md\\b stop : \\*\\*/\\s*$ - start : ^\\s*\\/\\/+\\W?md\\b stop : \\/\\/\\send\\smd\\s*$ replace : - ^\\s*\\/\\/\\s?(.*\\n?)$ - pattern : Dockerfile$|\\.(dockerfile|ya?ml)$ extract : - start : ^\\s*#+\\W?md\\b stop : '#\\s\\/md\\s*$' replace : - ^\\s*#?\\s?(.*\\n?)$ - pattern : \\.(html?|xml)$ extract : - start : <!--\\W?md\\b stop : -->\\s*$","title":"Default configuration"}]}