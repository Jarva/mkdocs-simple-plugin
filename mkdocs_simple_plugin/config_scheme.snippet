### include_folders
Directories whose name matches a glob pattern in this list will be
searched for documentation
### ignore_folders
Directories whose name matches a glob pattern in this list will NOT be
searched for documentation.
### ignore_hidden
Hidden directories will not be searched if this is true.
### merge_docs_dir
If true, the contents of the docs directory (if any) will be merged
at the same level as all other documentation.
Otherwise, the docs directory will be retained as a subdirectory in
the result.
### build_docs_dir
If set, the directory where docs will be coallated to be build.
Otherwise, the build docs directory will be a temporary directory.
### include_extensions
Any file in the searched directories whose name contains a string in
this list will simply be copied to the generated documentation.
### semiliterate
The semiliterate settings allows the extraction of markdown from
inside source files.
It is defined as a list of blocks of settings for different
filename patterns (typically matching filename extensions).
All regular expression parameters use ordinary Python `re` syntax.
The settings in each block are:

#### pattern
Any file in the searched directories whose name contains this
required regular expression parameter will be scanned.

#### destination
By default, the extracted documentation will be copied to a file
whose name is generated by removing the (last) extension from the
original filename, if any, and appending `.md`. However, if this
parameter is specified, it will be expanded as a template using
the match object from matching "pattern" against the filename,
to produce the name of the destination file.

#### terminate
If specified, all extraction from the file is terminated when
a line containing this regexp is encountered (whether or not
any extraction is currently active per the parameters below).
The last matching group in the `terminate` expression, if any,
is written to the destination file; note that "start" and "stop"
below share that same behavior.

#### extract
This parameter determines what will be extracted from a scanned
file that matches the pattern above. Its value should be a block
or list of blocks of settings. Each block determines one mode of
extraction from the scanned file, and can specify:

##### start
If no mode of extraction is active, and a line in the scanned
file matches this regexp, then this mode of extraction begins
with the next line. Only the first mode whose `start` expression
matches is activated, so at most one mode of extraction can be active
at any time. When an extraction is active, lines from the scanned
file are copied to the destination file (possibly modified by
the "replace" parameter below).

Additionally, start can specify an output path for the extracted
content. Simply add `file=output_path.md` to the start token line.

Example:

`````
```<md file=ouput_path.md>
`````


##### stop
When this extraction mode is active and a line containing this
(optional) regexp is encountered, this mode becomes inactive.
The `simple` plugin will begin searching for further occurrences
of `start` expressions on the _next_ line of the scanned file.

##### replace

The `replace` parameter allows extracted lines from a file to
be transformed in simple ways by regular expressions, for
example to strip leading comment symbols if necessary.

The `replace` parameter is a list of substitutions to attempt. Each
substitution is specified either by a two-element list of a
regular expression and a template, or by just a regular expression. In
each extracted line, the regular expression from each
substitution in turn is searched for.
If none match, the line is transcribed unchanged.
For the first one that matches, the template (expanded with the
results of the match) is transcribed in place of the line.
If there is no template, then just the last matching group is
transcribed, or nothing at all is transcribed if there is no last
matching group.
This latter convention makes it easy to selectively drop
lines that contain a given regular expression.

Once one of the
`replace` patterns matches, processing stops; no further expressions
are checked.

Note that the (last) extraction mode (if any) with no `start`
parameter is active beginning with the first line of the scanned file;
there is no way such a mode can be reactivated if it stops.
This convention allows for convenient "front-matter" extraction.

### Semiliterate example usage
#### Python

block comments starting with: `"""md`

```python
"""md
This is a documentation comment.
"""
```

line comments starting with:
`# md` and ending with `# /md`
strip leading spaces and `#``
                             
```python
# md
# This is a documentation comment.
# /md
```

#### C, C++, and Javascript
block comments starting with: `/** md`

```c
/** md
This is a documentation comment.
**/
```

in line comments starting with
`// md`, ending with `// end md`
strip leading spaces and `//`
                             
```c
// md
// This is a documentation comment.
// end md
```

#### YAML and Dockerfiles
line-comment blocks starting with
`# md` and ending with `# /md`
strip leading spaces and `#`

```yaml
# md
# This is a documentation comment.
# /md
```

#### HTML and xml
line-comment blocks starting with
`<!-- md` and ending with `-->`

```xml
<!-- md 
This is a documentation comment.
-->
```

